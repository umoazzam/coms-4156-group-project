package com.columbia.coms4156.citationservice.model;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.validation.constraints.NotBlank;

/**
 * Abstract base class for different source media types (Book, Video, Article, etc.).
 * Contains the common fields shared by all sources.
 */
@MappedSuperclass
public abstract class Source {

    /**
     * Unique identifier for the media entity.
     * Auto-generated by the database using identity strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title of the source.
     */
    @NotBlank(message = "Title is required")
    @Column(nullable = false)
    private String title;

    /**
     * The author of the source.
     */
    @NotBlank(message = "Author is required")
    @Column(nullable = false)
    private String author;

    /**
     * Default constructor for Source.
     */
    public Source() { }

    /**
     * Constructor for Source with title and author.
     *
     * @param titleParam the title of the source
     * @param authorParam the author of the source
     * @throws IllegalArgumentException if titleParam or authorParam is null or blank
     */
    public Source(String titleParam, String authorParam) {
        setTitle(titleParam);
        setAuthor(authorParam);
    }

    /**
     * Gets the source ID.
     *
     * @return the source ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the source ID.
     *
     * @param idParam the source ID to set
     * @throws IllegalArgumentException if idParam is negative
     */
    public void setId(Long idParam) {
        if (idParam != null && idParam < 0) {
            throw new IllegalArgumentException("ID cannot be negative");
        }
        this.id = idParam;
    }

    /**
     * Gets the title.
     *
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title.
     *
     * @param titleParam the title to set
     * @throws IllegalArgumentException if titleParam is null or blank
     */
    public void setTitle(String titleParam) {
        if (titleParam == null) {
            throw new IllegalArgumentException("Title cannot be null");
        }
        if (titleParam.trim().isEmpty()) {
            throw new IllegalArgumentException("Title cannot be blank");
        }
        this.title = titleParam;
    }

    /**
     * Gets the author.
     *
     * @return the author
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Sets the author.
     *
     * @param authorParam the author to set
     * @throws IllegalArgumentException if authorParam is null or blank
     */
    public void setAuthor(String authorParam) {
        if (authorParam == null) {
            throw new IllegalArgumentException("Author cannot be null");
        }
        if (authorParam.trim().isEmpty()) {
            throw new IllegalArgumentException("Author cannot be blank");
        }
        this.author = authorParam;
    }

    @Override
    public String toString() {
        return "Media{"
                + "id=" + id
                + ", title='" + title + '\''
                + ", author='" + author + '\''
                + '}';
    }
}

